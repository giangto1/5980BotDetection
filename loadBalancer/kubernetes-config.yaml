apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-app-deployment
  namespace: default
  labels:
    app: python-app
spec:
  replicas: 2  # Initial replica count, will be managed by the scaling logic
  selector:
    matchLabels:
      app: python-app
  template:
    metadata:
      labels:
        app: python-app
    spec:
      containers:
      - name: python-app
        image: your-docker-image:latest  # Replace with your Docker image
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        env:
        - name: REDIS_HOST
          value: "redis-service"  # Update if Redis runs elsewhere
        - name: REDIS_PORT
          value: "6379"
---
apiVersion: v1
kind: Service
metadata:
  name: python-app-service
  namespace: default
  labels:
    app: python-app
spec:
  selector:
    app: python-app
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  type: ClusterIP  # Use LoadBalancer or NodePort if external access is required
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: default
  labels:
    app: redis
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: default
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:6.2
        ports:
        - containerPort: 6379
